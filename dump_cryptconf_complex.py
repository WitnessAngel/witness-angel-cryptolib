from uuid0 import UUID

from wacryptolib.cryptainer import check_cryptoconf_sanity
from wacryptolib.utilities import dump_to_json_file

conf = {
  "payload_plaintext_signatures": [
    {
       "payload_digest_algo":"SHA256",
       "payload_signature_algo":"RSA_PSS",
       "payload_signature_trustee":{
          "trustee_type":"local_keyfactory"
       }
    }
  ],
  "payload_cipher_layers":[
    {
      "key_cipher_layers":[
        {
          "key_cipher_algo":"RSA_OAEP",
          "key_cipher_trustee":{
            "jsonrpc_url":"http://www.mydomain.com/json",
            "trustee_type":"jsonrpc_api"
          }
        }
      ],
      "payload_cipher_algo":"AES_EAX",
      "payload_ciphertext_signatures":[
      ]
    },
    {
      "key_cipher_layers":[
        {
          "key_cipher_algo":"RSA_OAEP",
          "key_cipher_trustee":{
            "keystore_uid":UUID("320b35bb-e735-4f6a-a4b2-ada124e30190"),
            "trustee_type":"authenticator"
          }
        }
      ],
      "payload_cipher_algo":"AES_CBC",
      "payload_ciphertext_signatures":[
        {
          "payload_digest_algo":"SHA3_512",
          "payload_signature_algo":"DSA_DSS",
          "payload_signature_trustee":{
            "trustee_type":"local_keyfactory"
          }
        }
      ]
    },
    {
      "key_cipher_layers":[
        {
          "key_cipher_algo":"[SHARED_SECRET]",
          "key_shared_secret_shards":[
            {
              "key_cipher_layers":[
                {
                  "key_cipher_algo":"RSA_OAEP",
                  "key_cipher_trustee":{
                    "trustee_type":"local_keyfactory"
                  }
                },
                {
                  "key_cipher_algo":"RSA_OAEP",
                  "key_cipher_trustee":{
                    "trustee_type":"local_keyfactory"
                  }
                }
              ]
            },
            {
              "key_cipher_layers":[
                {
                  "key_cipher_algo":"AES_CBC",
                  "key_cipher_layers":[
                    {
                      "key_cipher_algo":"[SHARED_SECRET]",
                      "key_shared_secret_shards":[
                        {
                          "key_cipher_layers":[
                            {
                              "key_cipher_algo":"RSA_OAEP",
                              "key_cipher_trustee":{
                                "trustee_type":"local_keyfactory"
                              },
                              "keychain_uid":UUID("65dbbe4f-0bd5-4083-a274-3c76efeecccc")
                            }
                          ]
                        }
                      ],
                      "key_shared_secret_threshold":1
                    },
                    {
                      "key_cipher_algo":"RSA_OAEP",
                      "key_cipher_trustee":{
                        "trustee_type":"local_keyfactory"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "key_cipher_layers":[
                {
                  "key_cipher_algo":"RSA_OAEP",
                  "key_cipher_trustee":{
                    "trustee_type":"local_keyfactory"
                  }
                }
              ]
            },
            {
              "key_cipher_layers":[
                {
                  "key_cipher_algo":"RSA_OAEP",
                  "key_cipher_trustee":{
                    "trustee_type":"local_keyfactory"
                  },
                  "keychain_uid":UUID("65dbbe4f-0bd5-4083-a274-3c76efeebbbb")
                }
              ]
            }
          ],
          "key_shared_secret_threshold":2
        }
      ],
      "payload_cipher_algo":"CHACHA20_POLY1305",
      "payload_ciphertext_signatures":[
        {
          "keychain_uid":UUID("0e8e861e-f0f7-e54b-18ea-34798d5daaaa"),
          "payload_digest_algo":"SHA3_256",
          "payload_signature_algo":"RSA_PSS",
          "payload_signature_trustee":{
            "trustee_type":"local_keyfactory"
          }
        },
        {
          "payload_digest_algo":"SHA512",
          "payload_signature_algo":"ECC_DSS",
          "payload_signature_trustee":{
            "trustee_type":"local_keyfactory"
          }
        }
      ]
    }
  ]
}

check_cryptoconf_sanity(conf)
dump_to_json_file("__example_complex_cryptoconf.conf", conf)
print("Success")